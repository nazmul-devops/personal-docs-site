{"remainingRequest":"/home/nazmul/Desktop/DevOps/git/nazmul/node_modules/babel-loader/lib/index.js??ref--3-1!/home/nazmul/Desktop/DevOps/git/nazmul/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!/home/nazmul/Desktop/DevOps/git/nazmul/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/nazmul/Desktop/DevOps/git/nazmul/node_modules/vue-loader/lib/index.js??ref--1-1!/home/nazmul/Desktop/DevOps/git/nazmul/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/nazmul/Desktop/DevOps/git/nazmul/src/docs/django-stuff/README.md?vue&type=template&id=4a2efbc8&","dependencies":[{"path":"/home/nazmul/Desktop/DevOps/git/nazmul/src/docs/django-stuff/README.md","mtime":1676049590930},{"path":"/home/nazmul/Desktop/DevOps/git/nazmul/node_modules/cache-loader/dist/cjs.js","mtime":1676048855746},{"path":"/home/nazmul/Desktop/DevOps/git/nazmul/node_modules/cache-loader/dist/cjs.js","mtime":1676048855746},{"path":"/home/nazmul/Desktop/DevOps/git/nazmul/node_modules/babel-loader/lib/index.js","mtime":1676048855834},{"path":"/home/nazmul/Desktop/DevOps/git/nazmul/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1676048856302},{"path":"/home/nazmul/Desktop/DevOps/git/nazmul/node_modules/cache-loader/dist/cjs.js","mtime":1676048855746},{"path":"/home/nazmul/Desktop/DevOps/git/nazmul/node_modules/vue-loader/lib/index.js","mtime":1676048856090},{"path":"/home/nazmul/Desktop/DevOps/git/nazmul/node_modules/@vuepress/markdown-loader/index.js","mtime":1676048856898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}