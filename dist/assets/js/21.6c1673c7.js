(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{322:function(e,t,o){"use strict";o.r(t);var i=o(10),a=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"most-used-git-commands"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#most-used-git-commands"}},[e._v("#")]),e._v(" Most used git commands")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("git init")]),e._v(": Initialize a new Git repository.")]),e._v(" "),t("li",[t("code",[e._v("git add <file>")]),e._v(": Add changes to a file to the staging area.")]),e._v(" "),t("li",[t("code",[e._v('git commit -m "commit message"')]),e._v(": Commit changes to the local repository with a descriptive message.")]),e._v(" "),t("li",[t("code",[e._v("git status")]),e._v(": Show the status of the repository.")]),e._v(" "),t("li",[t("code",[e._v("git log")]),e._v(": Show the commit history.")]),e._v(" "),t("li",[t("code",[e._v("git branch")]),e._v(": List all branches.")]),e._v(" "),t("li",[t("code",[e._v("git branch <branch name>")]),e._v(": Create a new branch.")]),e._v(" "),t("li",[t("code",[e._v("git checkout <branch name>")]),e._v(": Switch to a branch.")]),e._v(" "),t("li",[t("code",[e._v("git merge <branch name>")]),e._v(": Merge changes from another branch into the current branch.")]),e._v(" "),t("li",[t("code",[e._v("git clone <repository>")]),e._v(": Clone a remote repository to your local machine.")]),e._v(" "),t("li",[t("code",[e._v("git pull")]),e._v(": Fetch changes from the remote repository and merge them into the current branch.")]),e._v(" "),t("li",[t("code",[e._v("git push")]),e._v(": Push local changes to the remote repository.")]),e._v(" "),t("li",[t("code",[e._v("git remote add <name> <url>")]),e._v(": Add a new remote repository.")]),e._v(" "),t("li",[t("code",[e._v("git fetch")]),e._v(": Fetch changes from the remote repository but does not merge them into the current branch.")]),e._v(" "),t("li",[t("code",[e._v("git diff")]),e._v(": Show the changes made to files.")]),e._v(" "),t("li",[t("code",[e._v("git reset")]),e._v(": Reset changes made to the files in the staging area.")]),e._v(" "),t("li",[t("code",[e._v("git revert")]),e._v(": Revert a specific commit.")]),e._v(" "),t("li",[t("code",[e._v("git stash")]),e._v(": Save changes made to files without committing them.")]),e._v(" "),t("li",[t("code",[e._v("git tag")]),e._v(": Add a tag to a specific commit.")]),e._v(" "),t("li",[t("code",[e._v("git show")]),e._v(": Display the details of a specific commit.")]),e._v(" "),t("li",[t("code",[e._v("git rm")]),e._v(": Remove files from the repository and the file system.")]),e._v(" "),t("li",[t("code",[e._v("git mv")]),e._v(": Move or rename files.")])])])}),[],!1,null,null,null);t.default=a.exports}}]);